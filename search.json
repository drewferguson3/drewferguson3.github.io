[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "My name is Drew Ferguson and I am senior at the University of Nebraska-Lincoln. I am currently working to get my Bachelor’s degree in Journalism in Sports Media and Communications, with a minor in Business Administration. I will be graduating in the May of 2025! Born in Omaha, Nebraska, I always knew that I wanted to be a Husker. As a kid, I loved playing sports and spending as much time as I could outside. Going through school, I always knew I wanted to do something that allowed me to show my creative side. In the College of Journalism and Mass Communications, I have been able to do exactly that. I have gained valuable experience behind the scenes (or camera,) creating graphics for different events, creating video packages, and being an on-air talent. All of these experiences have been nothing short of fulfilling. In the College of Business, I have been able to gain valuable skills relating entrepreneurship, finance, and of course, administration. Being able to combine these skills makes me feel more than ready to get out into the real world and impact any company that I have the privilege of joining. You can find links to my Instagram, LinkedIn, and GitHub on this page."
  },
  {
    "objectID": "ProjectWork.html",
    "href": "ProjectWork.html",
    "title": "R Notebook",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggalt)\n\nRegistered S3 methods overwritten by 'ggalt':\n  method                  from   \n  grid.draw.absoluteGrob  ggplot2\n  grobHeight.absoluteGrob ggplot2\n  grobWidth.absoluteGrob  ggplot2\n  grobX.absoluteGrob      ggplot2\n  grobY.absoluteGrob      ggplot2\n\nlibrary(ggtext)\n\n\nzion &lt;- read_csv(\"zion.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 7 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): Season, Team, Lg, Pos, Awards\ndbl (26): Age, G, GS, MP, FG, FGA, FG%, 3P, 3PA, 3P%, 2P, 2PA, 2P%, eFG%, FT...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nzionadv &lt;- read_csv(\"zionadv.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 7 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): Season, Age, Team, Lg, Pos, Awards\ndbl (23): G, GS, MP, PER, TS%, 3PAr, FTr, ORB%, DRB%, TRB%, AST%, STL%, BLK%...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nant &lt;- read_csv(\"ant.csv\")\n\nRows: 6 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): Season, Team, Lg, Pos, Awards\ndbl (26): Age, G, GS, MP, FG, FGA, FG%, 3P, 3PA, 3P%, 2P, 2PA, 2P%, eFG%, FT...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nantadv &lt;- read_csv(\"antadv.csv\")\n\nRows: 6 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): Season, Age, Team, Lg, Pos, Awards\ndbl (23): G, GS, MP, PER, TS%, 3PAr, FTr, ORB%, DRB%, TRB%, AST%, STL%, BLK%...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ncade &lt;- read_csv(\"cade.csv\")\n\nRows: 5 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): Season, Age, Team, Lg, Pos, Awards\ndbl (25): G, GS, MP, FG, FGA, FG%, 3P, 3PA, 3P%, 2P, 2PA, 2P%, eFG%, FT, FTA...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ncadeadv &lt;- read_csv(\"cadeadv.csv\")\n\nRows: 5 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): Season, Age, Team, Lg, Pos, Awards\ndbl (23): G, GS, MP, PER, TS%, 3PAr, FTr, ORB%, DRB%, TRB%, AST%, STL%, BLK%...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\npaolo &lt;- read_csv(\"paolo.csv\")\n\nRows: 4 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): Season, Age, Team, Lg, Pos, Awards\ndbl (25): G, GS, MP, FG, FGA, FG%, 3P, 3PA, 3P%, 2P, 2PA, 2P%, eFG%, FT, FTA...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\npaoloadv &lt;- read_csv(\"paoloadv.csv\")\n\nRows: 4 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): Season, Age, Team, Lg, Pos, Awards\ndbl (23): G, GS, MP, PER, TS%, 3PAr, FTr, ORB%, DRB%, TRB%, AST%, STL%, BLK%...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nwemby &lt;- read_csv(\"wemby.csv\")\n\nRows: 3 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): Season, Team, Lg, Pos, Awards\ndbl (26): Age, G, GS, MP, FG, FGA, FG%, 3P, 3PA, 3P%, 2P, 2PA, 2P%, eFG%, FT...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nwembyadv &lt;- read_csv(\"wemby.csv\")\n\nRows: 3 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): Season, Team, Lg, Pos, Awards\ndbl (26): Age, G, GS, MP, FG, FGA, FG%, 3P, 3PA, 3P%, 2P, 2PA, 2P%, eFG%, FT...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhead(zion)\n\n# A tibble: 6 × 31\n  Season    Age Team  Lg    Pos       G    GS    MP    FG   FGA  `FG%`  `3P`\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 2019-20    19 NOP   NBA   PF       24    24  27.8   8.8  15    0.583   0.3\n2 2020-21    20 NOP   NBA   PF       61    61  33.2  10.4  17    0.611   0.2\n3 2021-22    21 NOP   NBA   PF       NA    NA  NA    NA    NA   NA      NA  \n4 2022-23    22 NOP   NBA   PF       29    29  33     9.8  16.2  0.608   0.2\n5 2023-24    23 NOP   NBA   PF       70    70  31.5   8.9  15.6  0.57    0.1\n6 2024-25    24 NOP   NBA   PF       30    30  28.6   9.6  16.9  0.567   0.1\n# ℹ 19 more variables: `3PA` &lt;dbl&gt;, `3P%` &lt;dbl&gt;, `2P` &lt;dbl&gt;, `2PA` &lt;dbl&gt;,\n#   `2P%` &lt;dbl&gt;, `eFG%` &lt;dbl&gt;, FT &lt;dbl&gt;, FTA &lt;dbl&gt;, `FT%` &lt;dbl&gt;, ORB &lt;dbl&gt;,\n#   DRB &lt;dbl&gt;, TRB &lt;dbl&gt;, AST &lt;dbl&gt;, STL &lt;dbl&gt;, BLK &lt;dbl&gt;, TOV &lt;dbl&gt;, PF &lt;dbl&gt;,\n#   PTS &lt;dbl&gt;, Awards &lt;chr&gt;\n\n\n\nzionstats &lt;- zion |&gt; \n  filter(\n    Season == \"2024-25\"\n    \n  )\n\n{R}\n\nlibrary(hoopR)\nlibrary(dplyr)"
  },
  {
    "objectID": "posts/last-5-no1-picks/index.html",
    "href": "posts/last-5-no1-picks/index.html",
    "title": "Comparing The NBA’s Last Five #1 Overall Picks",
    "section": "",
    "text": "Have the NBA’s last five #1 overall picks been living up to the expectations? (2019-2023)\nIn today’s NBA, top draft picks are expected to contribute immediately. The rise of social media, massive media coverage, and franchise-level expectations have placed unprecedented pressure on rookies—especially those selected with the #1 overall pick. Teams often rely on these players not just to develop, but to become instant cornerstones of their teams. This project shows how the last five #1 picks have performed in their rookie seasons, how their advanced stats aligned with team success in their first season, and how their early production compares to their overall career averages. The goal is to explore the impact, growth, and expectations placed on basketball’s most highly-touted young stars. (Note: Zaccharie Risacher is not included as he has only played one full season.)\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\n\n\nCode\nzion &lt;- read_csv(\"zion.csv\", show_col_types = FALSE)\n\nzion_rookie &lt;- zion |&gt;\n  filter(Season == \"2019-20\")\n\nzion_rookie_stats &lt;- zion_rookie |&gt;\n  mutate(Player = \"Zion Williamson\") |&gt;\n  select(Player, Season, PTS, TRB, AST) |&gt;\n  mutate(Total = PTS + TRB + AST)\n\nant &lt;- read_csv(\"ant.csv\", show_col_types = FALSE)\n\nant_rookie &lt;- ant |&gt;\n  filter(Season == \"2020-21\")\n\nant_rookie_stats &lt;- ant_rookie |&gt;\n  mutate(Player = \"Anthony Edwards\") |&gt;\n  select(Player, Season, PTS, TRB, AST) |&gt;\n  mutate(Total = PTS + TRB + AST)\n\ncade &lt;- read_csv(\"cade.csv\", show_col_types = FALSE)\n\ncade_rookie &lt;- cade |&gt;\n  filter(Season == \"2021-22\")\n\ncade_rookie_stats &lt;- cade_rookie |&gt;\n  mutate(Player = \"Cade Cunningham\") |&gt;\n  select(Player, Season, PTS, TRB, AST) |&gt;\n  mutate(Total = PTS + TRB + AST)\n\npaolo &lt;- read_csv(\"paolo.csv\", show_col_types = FALSE)\n\npaolo_rookie &lt;- paolo |&gt;\n  filter(Season == \"2022-23\")\n\npaolo_rookie_stats &lt;- paolo_rookie |&gt;\n  mutate(Player = \"Paolo Banchero\") |&gt;\n  select(Player, Season, PTS, TRB, AST) |&gt;\n  mutate(Total = PTS + TRB + AST)\n\nwemby &lt;- read_csv(\"wemby.csv\", show_col_types = FALSE)\n\nwemby_rookie &lt;- wemby |&gt;\n  filter(Season == \"2023-24\")\n\nwemby_rookie_stats &lt;- wemby_rookie |&gt;\n  mutate(Player = \"Victor Wembanyama\") |&gt;\n  select(Player, Season, PTS, TRB, AST) |&gt;\n  mutate(Total = PTS + TRB + AST)\n\nrookie_stats_all &lt;- bind_rows(\n  zion_rookie_stats,\n  ant_rookie_stats,\n  cade_rookie_stats,\n  paolo_rookie_stats,\n  wemby_rookie_stats\n)\n\nrookie_long &lt;- rookie_stats_all |&gt;\n  pivot_longer(cols = c(PTS, TRB, AST),\n               names_to = \"Stat\",\n               values_to = \"Value\")\n\nrookie_pra_stats &lt;- rookie_long |&gt;\n  mutate(\n    Stat = recode(Stat,\n                  \"PTS\" = \"Points\",\n                  \"TRB\" = \"Rebounds\",\n                  \"AST\" = \"Assists\")\n  ) |&gt;\n  mutate(\n    Stat = factor(Stat, levels = c(\"Assists\", \"Rebounds\", \"Points\"))  \n  )\n\n\nMy first chart stacks the per-game averages for Points, Rebounds, and Assists during the rookie seasons of the last five #1 overall picks: Zion Williamson, Anthony Edwards, Cade Cunningham, Paolo Banchero, and Victor Wembanyama. Let’s see how their respective inaugural seasons compared to each others.\n\n\nCode\nrookie_pra_stats &lt;- rookie_pra_stats |&gt;\n  mutate(Player = factor(Player, levels = c(\n    \"Anthony Edwards\",\n    \"Cade Cunningham\",\n    \"Paolo Banchero\",\n    \"Zion Williamson\",\n    \"Victor Wembanyama\"\n  )))\n\nggplot(rookie_pra_stats, aes(x = Value, y = Player, fill = Stat)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = round(Value, 1)),\n            position = position_stack(vjust = 0.5),\n            size = 3, color = \"white\") +\n  scale_fill_manual(\n    values = c(\n      \"Assists\" = \"red\",   \n      \"Rebounds\" = \"forestgreen\", \n      \"Points\" = \"steelblue\"   \n    ),\n    breaks = c(\"Points\", \"Rebounds\", \"Assists\")\n  ) +\n  labs(\n    title = \"Rookie Season Per-Game Averages\",\n    subtitle = \"Points, Rebounds, And Assists For The Last Five #1 Draft Picks\nIn Their Rookie Season\",\n    x = \"Per-Game Total\", y = \"\",\n    fill = \"\",\n    caption = \"Source: Basketball Reference\nBy: Drew Ferguson\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    legend.position = \"top\",\n    plot.title = element_text(face = \"bold\"),\n    axis.text.y = element_text(face = \"bold\"),\n    plot.caption = element_text(hjust = 1, size = 9, margin = margin(t = 10))\n  )\n\n\n\n\n\n\n\n\n\nWhat’s interesting isn’t just who had the highest combined stats, it’s how different their rookie seasons were. Zion Williamson came in as a scoring machine, putting up over 22 points per game in just 24 appearances. Victor Wembanyama paired elite scoring with huge rebounding numbers, already showing signs of a generational two-way presence (this chart doesn’t even show his league leading 3.8 blocks per game.) Cade Cunningham and Paolo Banchero posted similar stat lines, proving themselves as steady all-around contributors. Anthony Edwards, known for his explosiveness, delivered in scoring and added sneaky value as a rebounder. The chart shows how each player’s early role reflected not just their skill-set, but also the situation they walked into. Some were expected to be franchise cornerstones from day one; others had time to ease in. But what they all share is the pressure, and production, that comes with being the #1 pick in the age of social media and nonstop analysis.\n\n\nCode\nzionadv &lt;- read_csv(\"zionadv.csv\", show_col_types = FALSE)\n\nzionadv_rookie &lt;- zionadv |&gt;\n  filter(Season == \"2019-20\")\n\nzion_rookie_advstats &lt;- zionadv_rookie |&gt;\n  mutate(Player = \"Zion Williamson\") |&gt;\n  select(Player, Season, WS, VORP, BPM) |&gt;\n  mutate(Total = WS + VORP + BPM)\n\nantadv &lt;- read_csv(\"antadv.csv\", show_col_types = FALSE)\n\nantadv_rookie &lt;- antadv |&gt;\n  filter(Season == \"2020-21\")\n\nant_rookie_advstats &lt;- antadv_rookie |&gt;\n  mutate(Player = \"Anthony Edwards\") |&gt;\n  select(Player, Season, WS, VORP, BPM) |&gt;\n  mutate(Total = WS + VORP + BPM)\n\ncadeadv &lt;- read_csv(\"cadeadv.csv\", show_col_types = FALSE)\n\ncadeadv_rookie &lt;- cadeadv |&gt;\n  filter(Season == \"2021-22\")\n\ncade_rookie_advstats &lt;- cadeadv_rookie |&gt;\n  mutate(Player = \"Cade Cunningham\") |&gt;\n  select(Player, Season, WS, VORP, BPM) |&gt;\n  mutate(Total = WS + VORP + BPM)\n\npaoloadv &lt;- read_csv(\"paoloadv.csv\", show_col_types = FALSE)\n\npaoloadv_rookie &lt;- paoloadv |&gt;\n  filter(Season == \"2022-23\")\n\npaolo_rookie_advstats &lt;- paoloadv_rookie |&gt;\n  mutate(Player = \"Paolo Banchero\") |&gt;\n  select(Player, Season, WS, VORP, BPM) |&gt;\n  mutate(Total = WS + VORP + BPM)\n\nwembyadv &lt;- read_csv(\"wembyadv.csv\", show_col_types = FALSE)\n\nwembyadv_rookie &lt;- wembyadv |&gt;\n  filter(Season == \"2023-24\")\n\nwemby_rookie_advstats &lt;- wembyadv_rookie |&gt;\n  mutate(Player = \"Victor Wembanyama\") |&gt;\n  select(Player, Season, WS, VORP, BPM) |&gt;\n  mutate(Total = WS + VORP + BPM)\n\nrookie_advstats &lt;- bind_rows(\n  zion_rookie_advstats,\n  ant_rookie_advstats,\n  cade_rookie_advstats,\n  paolo_rookie_advstats,\n  wemby_rookie_advstats\n)\n\n\n\n\nCode\npelis &lt;-read.csv(\"pelis.csv\")\n\nwolves &lt;-read.csv(\"wolves.csv\")\n\npistons &lt;-read.csv(\"pistons.csv\")\n\nmagic &lt;-read.csv(\"magic.csv\")\n\nspurs &lt;-read.csv(\"spurs.csv\")\n\npelis_rookie &lt;- pelis |&gt;\n  filter(Season == \"2019-20\")\n\nwolves_rookie &lt;- wolves |&gt;\n  filter(Season == \"2020-21\")\n\npistons_rookie &lt;- pistons |&gt;\n  filter(Season == \"2021-22\")\n\nmagic_rookie &lt;- magic |&gt;\n  filter(Season == \"2022-23\")\n\nspurs_rookie &lt;- spurs |&gt;\n  filter(Season == \"2023-24\")\n\npelis_rookie_stats &lt;- pelis_rookie |&gt;\n  select(Team, Season, W, L, W.L.)\n\nwolves_rookie_stats &lt;- wolves_rookie |&gt;\n  select(Team, Season, W, L, W.L.)\n\npistons_rookie_stats &lt;- pistons_rookie |&gt;\n  select(Team, Season, W, L, W.L.)\n\nmagic_rookie_stats &lt;- magic_rookie |&gt;\n  select(Team, Season, W.L.)\n\nspurs_rookie_stats &lt;- spurs_rookie |&gt;\n  select(Team, Season, W.L.)\n\nrookie_advstatslong &lt;- rookie_advstats |&gt;\n  pivot_longer(cols = c(WS, VORP, BPM),\n               names_to = \"Stat\",\n               values_to = \"Value\") |&gt;\n  mutate(\n    Stat = recode(Stat,\n                  \"WS\" = \"Win Shares\",\n                  \"VORP\" = \"Value Over Replacement\",\n                  \"BPM\" = \"Box +/-\"),\n    Stat = factor(Stat, levels = c(\"Win Shares\", \"Value Over Replacement\", \"Box +/-\"))\n  )\n\nrookie_advtotals &lt;- rookie_advstatslong |&gt;\n  group_by(Player) |&gt;\n  summarize(Impact_Score = sum(Value, na.rm = TRUE))\n\n\n\n\nCode\nteam_winpct &lt;- tibble(\n  Player = c(\"Zion Williamson\", \"Anthony Edwards\", \"Cade Cunningham\", \"Paolo Banchero\", \"Victor Wembanyama\"),\n  Team_Win_Pct = c(0.417, 0.319, 0.280, 0.415, 0.268) \n)\n\n\n\n\nCode\nchart2_data &lt;- left_join(rookie_advtotals, team_winpct, by = \"Player\")\n\nplayer_colors &lt;- c(\n  \"Zion Williamson\" = \"orange\",\n  \"Anthony Edwards\" = \"steelblue\",\n  \"Cade Cunningham\" = \"red\",\n  \"Paolo Banchero\" = \"darkgrey\",\n  \"Victor Wembanyama\" = \"black\"\n) \n\n\nBeing the number one overall pick comes with big expectations, not just to perform individually, but to elevate the entire team. In this chart, we map each player’s rookie Total Winning Impact Score against their team’s overall win percentage during that same season. The goal? To see how much their on-court impact translated into team success.\n\n\nCode\nggplot(chart2_data, aes(x = Impact_Score, y = Team_Win_Pct, color = Player)) +\n  geom_point(size = 6) +\n  scale_color_manual(values = player_colors) +\n  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +\n  labs(\n    title = \"Rookie Impact vs Team Success\",\n    subtitle = \"Total Impact Score (Win Shares, +/-, Value Over Replacement) vs Team Win Percentage\",\n    x = \"Total Impact Score\",\n    y = \"Team Win Percentage\",\n    color = \"\",\n     caption = \"Source: Basketball Reference\nBy: Drew Ferguson\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(size = 12),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10)),\n    legend.position = \"right\",\n    plot.caption = element_text(hjust = 1, , size = 9, margin = margin(t = 10))\n  )\n\n\n\n\n\n\n\n\n\nWhat this comparison reveals is how complex that connection really is. For example, Victor Wembanyama’s rookie year was statistically dominant, and his Win Shares reflect that, yet the Spurs still struggled as a team. In contrast, Paolo Banchero’s production came in a more structured environment, where the Magic were on the rise and his numbers helped fuel real wins. Zion’s shortened rookie season still produced a strong Win Share value despite playing just 24 games, while Cade Cunningham and Anthony Edwards posted solid individual contributions amid team rebuilds. The biggest takeaway is that a rookie’s impact doesn’t happen all at once, or all because of them. Even elite players need a system, coaching, and supporting cast to turn stats into wins. This chart adds important context to the numbers, as it shows that while some rookies shine individually, others start shifting their team’s identity from the moment they step on the floor. The best front offices aren’t just drafting talent, they’re building environments where that talent can actually win.\n\n\nCode\nrookie_vs_career_totals &lt;- tibble(\n  Player = c(\"Zion Williamson\", \"Anthony Edwards\", \"Cade Cunningham\", \n             \"Paolo Banchero\", \"Victor Wembanyama\"),\n\n  Rookie_Total = c(\n    22.5 + 6.3 + 2.1,   \n    19.3 + 4.7 + 2.9,   \n    17.4 + 5.5 + 5.6,   \n    19.3 + 4.7 + 2.9,   \n    21.4 + 10.6 + 3.9  \n  ),\n\n  Career_Total = c(\n    25.0 + 7.0 + 3.3,   \n    22.0 + 5.2 + 3.8,  \n    19.9 + 5.1 + 6.3,   \n    20.1 + 5.4 + 3.0,   \n    22.5 + 10.8 + 3.8   \n  )\n)\n\n\n\n\nCode\nrookie_vs_career_long &lt;- rookie_vs_career_totals |&gt;\n  pivot_longer(cols = c(Rookie_Total, Career_Total),\n               names_to = \"Type\",\n               values_to = \"Value\") |&gt;\n  mutate(\n    Type = recode(Type,\n                  \"Rookie_Total\" = \"Rookie\",\n                  \"Career_Total\" = \"Career\")\n  )\n\n\nA player’s rookie season tells us a lot — but it doesn’t tell the whole story. This chart compares each players rookie per-game stats with their current career averages. Using a dumbbell plot, we can clearly visualize how their production has changed over time in three core areas: Points, Rebounds, and Assists.\n\n\nCode\nggplot(rookie_vs_career_long, aes(y = fct_reorder(Player, Value), x = Value, color = Type)) +\n  geom_line(aes(group = Player), color = \"gray\", linewidth = 2) + \n  geom_point(size = 4) +\n  scale_color_manual(values = c(\"Rookie\" = \"steelblue\", \"Career\" = \"orange\"), breaks = c(\"Rookie\", \"Career\")\n  ) +\n  labs(\n    title = \"Rookie vs Career Total Per-Game Production\",\n    subtitle = \"Comparing Combined Points + Rebounds + Assists Per \nGame From Rookie Season To Career Averages\",\n    x = \"Total Per-Game Average\",\n    y = \"\",\n    color = \"Averages\",\n    caption = \"Source: Basketball Reference\nBy: Drew Ferguson\",\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(size = 12),\n    axis.text.y = element_text(face = \"bold\"),\n    legend.position = \"top\",\n    plot.caption = element_text(hjust = 1,  size = 9, margin = margin(t = 10))\n  )\n\n\n\n\n\n\n\n\n\nThe plot highlights both consistency and growth. For instance, Anthony Edwards and Paolo Banchero have maintained steady numbers, showing that their rookie impact wasn’t a fluke — it was just the beginning. Zion Williamson stands out with an early scoring burst that set a high bar, while his career average has slightly fluctuated due to injuries and limited availability. Cade Cunningham shows upward movement in assists, reflecting his growing role as a floor general, while Victor Wembanyama, though early in his career, is already laying the foundation of a stat-stuffing trajectory. What this chart reveals is how these players young careers have evolved. Some of these players have come in hot and stayed hot, while others build over time, adjusting to the pace, system, and expectations of the league. Rookie years are high-pressure snapshots. If this chart shows us anything, it’s that these young players have shown consistent improvement in a short time frame.\nIn conclusion, we have done a deep dive into how the last five #1 overall picks have performed in the early stages of what are projected to be illustrious careers. From Victor Wembanyama’s immediate rise to Zion Williamson’s consistent efficiency, each of these players has brought a unique contribution to their team. What’s common between these players? Each of them is on-pace to become the face of their franchise. heir trajectories also reveal that early success doesn’t always translate directly to team wins — emphasizing that player development is only one piece of a much larger puzzle. As these stars continue to evolve, this snapshot reminds us how dynamic the rookie experience can be, and how the pressure to perform early is shaping the future of the league."
  },
  {
    "objectID": "posts/best-batting-seasons/index.html",
    "href": "posts/best-batting-seasons/index.html",
    "title": "How Did Aaron Judge’s 2024 Season Stack Up Against Some Of The Best Hitting Seasons Of All-Time?",
    "section": "",
    "text": "In 2024, Aaron Judge had one of the most impressive batting seasons of all-time.How did his season stack up against some of the best batting seasons ever?\nBaseball’s greatest hitters didn’t just dominate stat sheets—they shaped the identity of entire seasons. Whether through towering home runs, disciplined on-base efficiency, or month-to-month consistency, legendary sluggers left behind statistical fingerprints that defined greatness. This project highlights five of the most iconic single-season performances in MLB history, using data visualizations to explore how each player produced across different offensive metrics. The five players featured—Aaron Judge in 2024, Miguel Cabrera in 2012, Barry Bonds in 2001, Ted Williams in 1941, and Babe Ruth in 1921—were chosen based on the historical significance and statistical dominance of a single standout season in their careers. From cumulative monthly trends to efficiency-based comparisons and detailed batting average progression, the goal is to give an insightful look at how baseball’s best delivered across the grind of a full season.\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggrepel)\n\njudge &lt;- read.csv(\"Judge.csv\")\n\nmiggy &lt;- read.csv(\"Miggy.csv\")\n\nbonds &lt;- read.csv(\"Bonds.csv\")\n\nted &lt;- read.csv(\"Williams.csv\")\n\nruth &lt;- read.csv(\"Ruth.csv\")\n\nmonthly_stats &lt;- tibble(\n  Player = rep(c(\"Judge\", \"Bonds\", \"Williams\", \"Ruth\", \"Cabrera\"), each = 18),\n  Month = rep(c(\"April\", \"May\", \"June\", \"July\", \"August\", \"September\"), times = 15),\n  Stat = rep(rep(c(\"Home Runs\", \"Hits\", \"Runs Batted In\"), each = 6), times = 5),\n  Value = c(\n   \n    6, 20, 31, 39, 51, 58,  \n    22, 57, 93, 120, 155, 177,  \n    18, 45, 82, 99, 123, 144,   \n\n    11, 28, 39, 45, 57, 73,\n    18, 49, 71, 97, 125, 156,\n    22, 52, 71, 86, 112, 137,\n\n    1, 7, 15, 21, 31, 37,\n    7, 51, 86, 113, 156, 185,\n    5, 27, 56, 75, 101, 120,\n\n    5, 15, 28, 38, 48, 59,\n    18, 51, 89, 119, 163, 204,\n    14, 43, 71, 102, 164, 168,\n\n    7, 9, 16, 25, 33, 44,\n    25, 66, 99, 132, 167, 205,\n    20, 42, 62, 85, 109, 139\n  )\n)\n\nmonthly_stats$Month &lt;- factor(monthly_stats$Month,\n                              levels = c(\"April\", \"May\", \"June\", \"July\", \"August\", \"September\"))\n\nggplot(monthly_stats, aes(x = Month, y = Value, color = Player, group = Player)) +\n  geom_line(linewidth = 1.1) +\n  geom_point(linewidth = 2) +\n  facet_wrap(~Stat, scales = \"free_y\", nrow = 1) +\n  scale_color_manual(values = c(\n    \"Judge\" = \"blue\",\n    \"Bonds\" = \"red\",\n    \"Williams\" = \"green4\",\n    \"Ruth\" = \"purple\",\n    \"Cabrera\" = \"darkorange\"\n  )) +\n  labs(\n    title = \"Monthly Offensive Production by Stat\",\n    subtitle = \"Home Runs, Hits, and RBIs for Five Historic Hitting Seasons\",\n    x = \"Month\",\n    y = \"\",\n    caption = \"Source: Baseball Reference\n    By: Drew Ferguson\"\n  ) +\n  theme_minimal(base_size = 13) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 18),\n    plot.subtitle = element_text(size = 13, margin = margin(b = 10)),\n    legend.title = element_blank(),\n    strip.text = element_text(face = \"bold\", size = 12),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.caption = element_text(size = 10, color = \"gray30\", hjust = 1, margin = margin(t = 12)),\n    plot.caption.position = \"plot\"\n  )\n\n\n\n\n\n\n\n\n\nThis chart displays the month-to-month offensive production of five historic MLB hitters, measured by cumulative Home Runs, Hits, and Runs Batted In (RBIs) from April through September. Each panel isolates one stat, allowing for an easy comparison of how each player performed across the season.\nThe chart reveals not just which players excelled in each category, but how consistent and explosive their production was over time. For instance, Babe Ruth’s performance in all three categories is remarkably linear and dominant—his steep climb in Hits and RBIs stands out by September. Barry Bonds shows a similar upward trend, especially in the Home Runs panel where he races ahead after July, matching the power surge that defined his iconic 2001 season.Meanwhile, players like Miguel Cabrera and Aaron Judge demonstrate steady, reliable contributions, with incremental gains in each category. Ted Williams’ progression is a bit flatter in Home Runs but remains strong in Hits, reflecting his precision as a contact hitter. Overall, the visualization captures how these elite players shaped their legendary seasons through sustained offensive output, and how timing, momentum, and volume each contributed to their impact.\n\n\nCode\navg_data &lt;- tibble(\n  Player = rep(c(\"Judge\", \"Bonds\", \"Williams\", \"Ruth\", \"Cabrera\"), each = 6),\n  Month = rep(c(\"April\", \"May\", \"June\", \"July\", \"August\", \"September\"), times = 5),\n  AVG = c(\n    .325, .336, .320, .318, .324, .310,      \n    .330, .355, .337, .320, .345, .310,     \n    .412, .410, .399, .405, .402, .403,    \n    .370, .390, .372, .365, .368, .370,   \n    .320, .333, .315, .325, .330, .328     \n  )\n)\n\navg_data$Month &lt;- factor(avg_data$Month, levels = c(\"April\", \"May\", \"June\", \"July\", \"August\", \"September\")) \n\nggplot(avg_data, aes(x = Month, y = AVG, group = Player, color = Player)) +\n  geom_line(linewidth = 1.1) +\n  geom_point(size = 2) +\n  scale_color_manual(values = c(\n    \"Judge\" = \"blue\",\n    \"Bonds\" = \"red\",\n    \"Williams\" = \"green4\",\n    \"Ruth\" = \"purple\",\n    \"Cabrera\" = \"darkorange\"\n  )) +\n  labs(\n    title = \"Batting Average Progression by Month\",\n    subtitle = \"Slope Chart Showing Monthly Trends for Five Legendary Seasons\",\n    x = \"Month\",\n    y = \"Batting Average\",\n    caption = \"Source: Baseball Reference\n    By: Drew Ferguson\"\n  ) +\n  theme_minimal(base_size = 13) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 18),\n    plot.subtitle = element_text(size = 13),\n    legend.title = element_blank(),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.caption = element_text(size = 10, color = \"gray30\", hjust = 1, margin = margin(t = 12)),\n    plot.caption.position = \"plot\"\n  )\n\n\n\n\n\n\n\n\n\nThis slope chart tracks monthly batting average trends for through each respective season. By isolating one stat across time, we get a cleaner view of consistency, slumps, and hot streaks throughout the year.\nTed Williams’ line stays remarkably stable and high across all six months, peaking just over .410 in April and hovering near .400 the rest of the way—classic Williams. Ruth also shows strong early performance, with a slight mid-season dip followed by a recovery in August and September. Bonds’ trajectory is more volatile, peaking in May and dipping hard by the season’s end, a reminder of how streaks and fatigue can affect even the best hitters. Aaron Judge and Miguel Cabrera trend similarly—consistently good, but not overpowering. Both hover in the .310–.330 range with minor fluctuations, displaying the kind of steady production that still yields big results when paired with power numbers. The slope chart is simple but effective in revealing how rare sustained greatness is, especially over the grind of a full season.\n\n\nCode\nbubble_data &lt;- tibble(\n  Player = c(\"Judge\", \"Bonds\", \"Williams\", \"Ruth\", \"Cabrera\"),\n  OBP = c(.458, .515, .553, .512, .393),\n  SLG = c(.701, .863, .735, .846, .606),\n  WAR = c(11.2, 11.9, 10.4, 12.9, 7.3)\n)\n\nggplot(bubble_data, aes(x = OBP, y = SLG, size = WAR, fill = Player)) +\n  geom_point(alpha = 0.85, shape = 21, color = \"black\") +\n  geom_text(aes(label = WAR), color = \"black\", size = 4, fontface = \"bold\") +\n  scale_size_continuous(range = c(8, 14), guide = \"none\") +\n  guides(fill = guide_legend(override.aes = list(size = 6))) +\n  labs(\n    title = \"On Base Percentage vs. Slugging\nAmong MLB's Greatest Single-Seasons\",\n    subtitle = \"Bubble Size and Number Represent WAR\n(Wins Above Replacement)\",\n    x = \"On-Base Percentage\",\n    y = \"Slugging Percentage\",\n    caption = \"Source: Baseball Reference\n    By: Drew Ferguson\"\n  ) +\n  coord_cartesian(ylim = c(0.6, 0.92)) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 18),\n    plot.subtitle = element_text(size = 13, margin = margin(b = 10)),\n    axis.title.x = element_text(face = \"bold\", size = 13, margin = margin(t = 10)),\n    axis.title.y = element_text(face = \"bold\", size = 13, margin = margin(r = 10)),\n    legend.title = element_blank(),\n    legend.position = \"right\",\n    plot.caption = element_text(size = 10, color = \"black\", hjust = 1, margin = margin(t = 10)),\n    plot.caption.position = \"plot\"\n  )\n\n\n\n\n\n\n\n\n\nThis bubble chart compares five legendary single-season performances using On-Base Percentage (OBP) and Slugging Percentage (SLG) as axes, while the bubble size and label represent WAR (Wins Above Replacement). It visually summarizes both efficiency and dominance in a single view.\nBarry Bonds and Babe Ruth immediately jump off the chart with elite OBP and SLG values, positioning them in the upper-right quadrant—where greatness tends to reside. Bonds’ slugging percentage of .863 and Ruth’s WAR of 12.9 indicate just how overpowering their presence was during those seasons. Ted Williams, although slightly behind in SLG, boasts the highest OBP on the chart at .553, showing his unmatched plate discipline and consistency in getting on base. Aaron Judge and Miguel Cabrera occupy lower quadrants, but not without significance. Judge’s 11.2 WAR places him near the game’s elite for a single season, and Cabrera’s combination of solid SLG and respectable WAR reflects his all-around offensive skill. The chart not only contextualizes WAR but also makes it easier to appreciate how different strengths—power, contact, and on-base ability—contribute to overall value."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DrewsSportsBlog",
    "section": "",
    "text": "How Did Aaron Judge’s 2024 Season Stack Up Against Some Of The Best Hitting Seasons Of All-Time?\n\n\n\n\n\n\nMLB\n\n\nHitting\n\n\n\n\n\n\n\n\n\nMay 4, 2025\n\n\nDrew Ferguson\n\n\n\n\n\n\n\n\n\n\n\n\nComparing The NBA’s Last Five #1 Overall Picks\n\n\n\n\n\n\nNBA\n\n\nRookies\n\n\nProduction\n\n\n\n\n\n\n\n\n\nApr 14, 2025\n\n\nDrew Ferguson\n\n\n\n\n\n\nNo matching items"
  }
]